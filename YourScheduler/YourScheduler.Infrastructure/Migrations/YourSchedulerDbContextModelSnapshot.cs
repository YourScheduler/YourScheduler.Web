// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using YourScheduler.Infrastructure;

#nullable disable

namespace YourScheduler.Infrastructure.Migrations
{
    [DbContext(typeof(YourSchedulerDbContext))]
    partial class YourSchedulerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Displayname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Displayname = "admin",
                            Email = "admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "admin",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN@GMAIL.COM",
                            PasswordHash = "AM0GC8APd/YN0TfyDhvCdzO/bVr+YT1JDFKr2mvBm3pIL0UQGliA29UbD4Dc7rXm9Q==",
                            PhoneNumber = "111 222 333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "GYJAQ3CGNKZV3MLKYU4W3OE3EMBM4S2A",
                            Surname = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@gmail.com"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Displayname = "kjarzyna",
                            Email = "jarzyna@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Krzysztof",
                            NormalizedEmail = "JARZYNA@GMAIL.COM",
                            NormalizedUserName = "JARZYNA@GMAIL.COM",
                            PasswordHash = "AE+d+8r6vaBRs54hzzM3hWutcXasyR6BEV7f3TnWFd4fD0rd4i387f/AOkOqEeiYEQ==",
                            PhoneNumber = "666 598 456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "TZH6KC5MQFVMYO6CJLJCKHCBUME6ZL2L",
                            Surname = "Jarzyna",
                            TwoFactorEnabled = false,
                            UserName = "jarzyna@gmail.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Displayname = "Jane",
                            Email = "jane_johnson@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Jane",
                            NormalizedEmail = "JANE_JOHNSON@GMAIL.COM",
                            NormalizedUserName = "JANE_JOHNSON@GMAIL.COM",
                            PasswordHash = "ALyyWH2pyabIMNeIFdro1Fk+1JpU78ld9MUZNFElE0CNHf7rhynnhByHCk0DhPVbRQ==",
                            PhoneNumber = "666 598 456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "JIIALFRLZ246AYBNV23LAX7OAX7EYNMW",
                            Surname = "Johnson",
                            TwoFactorEnabled = false,
                            UserName = "jane_johnson@gmail.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Displayname = "willmich",
                            Email = "michaelww@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Michael",
                            NormalizedEmail = "MICHAELWW@GMAIL.COM",
                            NormalizedUserName = "MICHAELWW@GMAIL.COM",
                            PasswordHash = "ANvQcMG51mqVFOss0WbFLpjd4n4bU31LjKhz5+nLK8Exq2k6sr5qEAx8kpIwqO8gzA==",
                            PhoneNumber = "987 654 321",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BLCXDMVL3TVF7Y6QUQ7D276KAM5DNNFD",
                            Surname = "Williams",
                            TwoFactorEnabled = false,
                            UserName = "michaelww@gmail.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Displayname = "william",
                            Email = "joneswilliam@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "William",
                            NormalizedEmail = "JONESWILLIAM@GMAIL.COM",
                            NormalizedUserName = "JONESWILLIAM@GMAIL.COM",
                            PasswordHash = "ACI7imZpFp066nnKJg5pWRGMck2iRIfv8njTbbDGSjrVXG4UNGRegz1pgnbd2TWjFA==",
                            PhoneNumber = "123 456 789",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7VFYBGF2JDBWAE2XLU26MAN7UMLIW77Z",
                            Surname = "Jones",
                            TwoFactorEnabled = false,
                            UserName = "joneswilliam@gmail.com"
                        },
                        new
                        {
                            Id = 6,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "",
                            Displayname = "brownie",
                            Email = "oliviab@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Olivia",
                            NormalizedEmail = "OLIVIAB@GMAIL.COM",
                            NormalizedUserName = "OLIVIAB@GMAIL.COM",
                            PasswordHash = "AOGEA6dOTTEKEPZoUS7uiqem4IlfeEJxeYvjkWcE9dLMyNwD0++4ZbX440vYR/tlgQ==",
                            PhoneNumber = "666 598 456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "K6LK7DMAIJSPVJD335UHGD757DORBQC5",
                            Surname = "Brown",
                            TwoFactorEnabled = false,
                            UserName = "oliviab@gmail.com"
                        });
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.ApplicationUserEvents", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("ApplicationUsersEvents");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = 1,
                            EventId = 1
                        },
                        new
                        {
                            ApplicationUserId = 2,
                            EventId = 2
                        },
                        new
                        {
                            ApplicationUserId = 2,
                            EventId = 3
                        },
                        new
                        {
                            ApplicationUserId = 2,
                            EventId = 4
                        },
                        new
                        {
                            ApplicationUserId = 3,
                            EventId = 4
                        },
                        new
                        {
                            ApplicationUserId = 4,
                            EventId = 5
                        },
                        new
                        {
                            ApplicationUserId = 5,
                            EventId = 5
                        },
                        new
                        {
                            ApplicationUserId = 6,
                            EventId = 6
                        });
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.ApplicationUserTeams", b =>
                {
                    b.Property<int>("ApplicationUserId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TeamRoleId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "TeamId", "TeamRoleId");

                    b.HasIndex("TeamRoleId");

                    b.ToTable("ApplicationUsersTeams");

                    b.HasData(
                        new
                        {
                            ApplicationUserId = 1,
                            TeamId = 1,
                            TeamRoleId = 2
                        },
                        new
                        {
                            ApplicationUserId = 2,
                            TeamId = 1,
                            TeamRoleId = 3
                        },
                        new
                        {
                            ApplicationUserId = 3,
                            TeamId = 1,
                            TeamRoleId = 1
                        },
                        new
                        {
                            ApplicationUserId = 1,
                            TeamId = 2,
                            TeamRoleId = 5
                        },
                        new
                        {
                            ApplicationUserId = 2,
                            TeamId = 2,
                            TeamRoleId = 6
                        },
                        new
                        {
                            ApplicationUserId = 3,
                            TeamId = 2,
                            TeamRoleId = 4
                        },
                        new
                        {
                            ApplicationUserId = 5,
                            TeamId = 2,
                            TeamRoleId = 4
                        },
                        new
                        {
                            ApplicationUserId = 3,
                            TeamId = 3,
                            TeamRoleId = 8
                        },
                        new
                        {
                            ApplicationUserId = 6,
                            TeamId = 3,
                            TeamRoleId = 7
                        },
                        new
                        {
                            ApplicationUserId = 4,
                            TeamId = 3,
                            TeamRoleId = 9
                        },
                        new
                        {
                            ApplicationUserId = 4,
                            TeamId = 4,
                            TeamRoleId = 11
                        },
                        new
                        {
                            ApplicationUserId = 1,
                            TeamId = 4,
                            TeamRoleId = 12
                        },
                        new
                        {
                            ApplicationUserId = 3,
                            TeamId = 4,
                            TeamRoleId = 10
                        },
                        new
                        {
                            ApplicationUserId = 5,
                            TeamId = 4,
                            TeamRoleId = 10
                        },
                        new
                        {
                            ApplicationUserId = 6,
                            TeamId = 4,
                            TeamRoleId = 12
                        },
                        new
                        {
                            ApplicationUserId = 5,
                            TeamId = 5,
                            TeamRoleId = 14
                        },
                        new
                        {
                            ApplicationUserId = 1,
                            TeamId = 5,
                            TeamRoleId = 15
                        },
                        new
                        {
                            ApplicationUserId = 6,
                            TeamId = 5,
                            TeamRoleId = 13
                        },
                        new
                        {
                            ApplicationUserId = 6,
                            TeamId = 6,
                            TeamRoleId = 17
                        },
                        new
                        {
                            ApplicationUserId = 1,
                            TeamId = 6,
                            TeamRoleId = 18
                        },
                        new
                        {
                            ApplicationUserId = 2,
                            TeamId = 6,
                            TeamRoleId = 18
                        },
                        new
                        {
                            ApplicationUserId = 4,
                            TeamId = 6,
                            TeamRoleId = 18
                        },
                        new
                        {
                            ApplicationUserId = 5,
                            TeamId = 6,
                            TeamRoleId = 16
                        });
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOpen")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EventId");

                    b.ToTable("Events");

                    b.HasData(
                        new
                        {
                            EventId = 1,
                            AdministratorId = 1,
                            Date = new DateTime(2023, 6, 22, 19, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Koncert z okazji urodzin TVP",
                            IsOpen = true,
                            Name = "Koncert Zenka Martyniuka",
                            PicturePath = "/Pictures/eventId=1.jpg"
                        },
                        new
                        {
                            EventId = 2,
                            AdministratorId = 1,
                            Date = new DateTime(2023, 12, 1, 17, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Wyjątkowe spotkanie z autorami bestsellerowych książek",
                            IsOpen = true,
                            Name = "Spotkanie Literackie: Autorzy Bestsellerów",
                            PicturePath = "/Pictures/eventId=2.jpg"
                        },
                        new
                        {
                            EventId = 3,
                            AdministratorId = 2,
                            Date = new DateTime(2023, 10, 2, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Spektakl muzyczny pełen magii i emocji",
                            IsOpen = true,
                            Name = "Występ Teatru Muzycznego: Magiczna Melodia",
                            PicturePath = "/Pictures/eventId=3.jpg"
                        },
                        new
                        {
                            EventId = 4,
                            AdministratorId = 3,
                            Date = new DateTime(2023, 9, 11, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Najnowsze trendy i innowacje technologiczne na światowym poziomie",
                            IsOpen = true,
                            Name = "Konferencja Technologiczna: Przyszłość Innowacji",
                            PicturePath = "/Pictures/defaultEvent.jpg"
                        },
                        new
                        {
                            EventId = 5,
                            AdministratorId = 4,
                            Date = new DateTime(2024, 1, 8, 20, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Przyjemny wieczór filmowy z wyjątkowymi produkcjami z całego świata",
                            IsOpen = false,
                            Name = "Sesja Filmowa: Kino bez Granic",
                            PicturePath = "/Pictures/defaultEvent.jpg"
                        },
                        new
                        {
                            EventId = 6,
                            AdministratorId = 5,
                            Date = new DateTime(2023, 7, 15, 16, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Wyjątkowy pokaz kulinarny, podczas którego można odkryć smaki z różnych zakątków świata",
                            IsOpen = false,
                            Name = "Pokaz Kulinarny: Świat Smaków",
                            PicturePath = "/Pictures/eventId=6.jpg"
                        },
                        new
                        {
                            EventId = 7,
                            AdministratorId = 6,
                            Date = new DateTime(2023, 8, 10, 18, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Niezwykłe przedstawienie teatralne pełne emocji i wrażeń",
                            IsOpen = true,
                            Name = "Sztuka na Scenie: Wieczór Teatru",
                            PicturePath = "/Pictures/defaultEvent.jpg"
                        });
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamId"));

                    b.Property<string>("Creator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicturePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TeamId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            TeamId = 1,
                            Creator = "Olivia",
                            Description = "Grupa szkółki pływackiej Argonaut",
                            IsPrivate = false,
                            Name = "Grupa początkująca basen Chełm",
                            PicturePath = "/Pictures/teamId=1.jpg"
                        },
                        new
                        {
                            TeamId = 2,
                            Creator = "Wasyl",
                            Description = "Grupa zrzeszająca mieszkańców osiedla Lawendowe Wzgórze w Gdańsku",
                            IsPrivate = false,
                            Name = "Mieszkańcy osiedla Lawendowe Wzgórze",
                            PicturePath = "/Pictures/teamId=2.jpg"
                        },
                        new
                        {
                            TeamId = 3,
                            Creator = "Billy",
                            Description = "Zapraszamy do naszego kreatywnego warsztatu artystycznego, gdzie możesz rozwijać swoje umiejętności w różnych dziedzinach sztuki.",
                            IsPrivate = false,
                            Name = "Kreatywny Warsztat Artystyczny",
                            PicturePath = "/Pictures/defaultTeam.jpg"
                        },
                        new
                        {
                            TeamId = 4,
                            Creator = "Maks",
                            Description = "Dołącz do naszego klubu fitness i wellness, gdzie możesz ćwiczyć, relaksować się i dbać o swoje zdrowie pod okiem profesjonalnych instruktorów.",
                            IsPrivate = false,
                            Name = "Klub Fitness i Wellness",
                            PicturePath = "/Pictures/teamId=4.jpg"
                        },
                        new
                        {
                            TeamId = 5,
                            Creator = "Kokodźambo",
                            Description = "Zapraszamy do naszego klubu fotograficznego, gdzie pasjonaci fotografii mogą się spotkać, dzielić się wiedzą i rozwijać swoje umiejętności fotograficzne.",
                            IsPrivate = false,
                            Name = "Klub Fotograficzny Obiektyw",
                            PicturePath = "/Pictures/defaultTeam.jpg"
                        },
                        new
                        {
                            TeamId = 6,
                            Creator = "PiknaSukna",
                            Description = "Nasze studio tańca Ritmo oferuje różnorodne style taneczne dla osób w każdym wieku, bez względu na poziom zaawansowania.",
                            IsPrivate = false,
                            Name = "Studio Tańca Ritmo",
                            PicturePath = "/Pictures/defaultTeam.jpg"
                        });
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.TeamRole", b =>
                {
                    b.Property<int>("TeamRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamRoleId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<int>("TeamRoleFlagsId")
                        .HasColumnType("int");

                    b.HasKey("TeamRoleId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamRoleFlagsId");

                    b.ToTable("TeamRoles");

                    b.HasData(
                        new
                        {
                            TeamRoleId = 1,
                            Name = "Invitee",
                            TeamId = 1,
                            TeamRoleFlagsId = 1
                        },
                        new
                        {
                            TeamRoleId = 4,
                            Name = "Pending invite",
                            TeamId = 2,
                            TeamRoleFlagsId = 1
                        },
                        new
                        {
                            TeamRoleId = 7,
                            Name = "Sent confirmation",
                            TeamId = 3,
                            TeamRoleFlagsId = 1
                        },
                        new
                        {
                            TeamRoleId = 10,
                            Name = "Zaproszony",
                            TeamId = 4,
                            TeamRoleFlagsId = 1
                        },
                        new
                        {
                            TeamRoleId = 13,
                            Name = "Invitee",
                            TeamId = 5,
                            TeamRoleFlagsId = 1
                        },
                        new
                        {
                            TeamRoleId = 16,
                            Name = "Invitee",
                            TeamId = 6,
                            TeamRoleFlagsId = 1
                        },
                        new
                        {
                            TeamRoleId = 2,
                            Name = "Admin",
                            TeamId = 1,
                            TeamRoleFlagsId = 2
                        },
                        new
                        {
                            TeamRoleId = 5,
                            Name = "Boss",
                            TeamId = 2,
                            TeamRoleFlagsId = 2
                        },
                        new
                        {
                            TeamRoleId = 8,
                            Name = "The Absolute",
                            TeamId = 3,
                            TeamRoleFlagsId = 2
                        },
                        new
                        {
                            TeamRoleId = 11,
                            Name = "Wielki Guru",
                            TeamId = 4,
                            TeamRoleFlagsId = 2
                        },
                        new
                        {
                            TeamRoleId = 14,
                            Name = "Admin",
                            TeamId = 5,
                            TeamRoleFlagsId = 2
                        },
                        new
                        {
                            TeamRoleId = 17,
                            Name = "Leader",
                            TeamId = 6,
                            TeamRoleFlagsId = 2
                        },
                        new
                        {
                            TeamRoleId = 3,
                            Name = "User",
                            TeamId = 1,
                            TeamRoleFlagsId = 3
                        },
                        new
                        {
                            TeamRoleId = 6,
                            Name = "Noob",
                            TeamId = 2,
                            TeamRoleFlagsId = 3
                        },
                        new
                        {
                            TeamRoleId = 9,
                            Name = "Nobody",
                            TeamId = 3,
                            TeamRoleFlagsId = 3
                        },
                        new
                        {
                            TeamRoleId = 12,
                            Name = "Civilian",
                            TeamId = 4,
                            TeamRoleFlagsId = 3
                        },
                        new
                        {
                            TeamRoleId = 15,
                            Name = "Guest",
                            TeamId = 5,
                            TeamRoleFlagsId = 3
                        },
                        new
                        {
                            TeamRoleId = 18,
                            Name = "Infant",
                            TeamId = 6,
                            TeamRoleFlagsId = 3
                        });
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.TeamRoleFlags", b =>
                {
                    b.Property<int>("TeamRoleFlagsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TeamRoleFlagsId"));

                    b.Property<bool>("CanAddTeamEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAddTeamMember")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAddTeamRole")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditDescription")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditRoleFlags")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditTeamEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditTeamMessage")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditTeamName")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditTeamPhoto")
                        .HasColumnType("bit");

                    b.Property<bool>("CanEditTeamRole")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemoveTeamEvent")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemoveTeamMember")
                        .HasColumnType("bit");

                    b.Property<bool>("CanRemoveTeamRole")
                        .HasColumnType("bit");

                    b.Property<bool>("CanSendEmailToTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("CanViewContent")
                        .HasColumnType("bit");

                    b.HasKey("TeamRoleFlagsId");

                    b.ToTable("TeamRolesFlags");

                    b.HasData(
                        new
                        {
                            TeamRoleFlagsId = 1,
                            CanAddTeamEvent = false,
                            CanAddTeamMember = false,
                            CanAddTeamRole = false,
                            CanEditDescription = false,
                            CanEditRoleFlags = false,
                            CanEditTeamEvent = false,
                            CanEditTeamMessage = false,
                            CanEditTeamName = false,
                            CanEditTeamPhoto = false,
                            CanEditTeamRole = false,
                            CanRemoveTeamEvent = false,
                            CanRemoveTeamMember = false,
                            CanRemoveTeamRole = false,
                            CanSendEmailToTeam = false,
                            CanViewContent = false
                        },
                        new
                        {
                            TeamRoleFlagsId = 2,
                            CanAddTeamEvent = true,
                            CanAddTeamMember = true,
                            CanAddTeamRole = true,
                            CanEditDescription = true,
                            CanEditRoleFlags = true,
                            CanEditTeamEvent = true,
                            CanEditTeamMessage = true,
                            CanEditTeamName = true,
                            CanEditTeamPhoto = true,
                            CanEditTeamRole = true,
                            CanRemoveTeamEvent = true,
                            CanRemoveTeamMember = true,
                            CanRemoveTeamRole = true,
                            CanSendEmailToTeam = true,
                            CanViewContent = true
                        },
                        new
                        {
                            TeamRoleFlagsId = 3,
                            CanAddTeamEvent = false,
                            CanAddTeamMember = false,
                            CanAddTeamRole = false,
                            CanEditDescription = false,
                            CanEditRoleFlags = false,
                            CanEditTeamEvent = false,
                            CanEditTeamMessage = false,
                            CanEditTeamName = false,
                            CanEditTeamPhoto = false,
                            CanEditTeamRole = false,
                            CanRemoveTeamEvent = false,
                            CanRemoveTeamMember = false,
                            CanRemoveTeamRole = false,
                            CanSendEmailToTeam = false,
                            CanViewContent = true
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("YourScheduler.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("YourScheduler.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourScheduler.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("YourScheduler.Infrastructure.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.ApplicationUserEvents", b =>
                {
                    b.HasOne("YourScheduler.Infrastructure.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUsersEvents")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourScheduler.Infrastructure.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.ApplicationUserTeams", b =>
                {
                    b.HasOne("YourScheduler.Infrastructure.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUsersTeams")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YourScheduler.Infrastructure.Entities.Team", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("YourScheduler.Infrastructure.Entities.TeamRole", "TeamRole")
                        .WithMany("ApplicationUserTeams")
                        .HasForeignKey("TeamRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Team");

                    b.Navigation("TeamRole");
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.TeamRole", b =>
                {
                    b.HasOne("YourScheduler.Infrastructure.Entities.Team", null)
                        .WithMany("TeamRoles")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("YourScheduler.Infrastructure.Entities.TeamRoleFlags", "TeamRoleFlags")
                        .WithMany()
                        .HasForeignKey("TeamRoleFlagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamRoleFlags");
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ApplicationUsersEvents");

                    b.Navigation("ApplicationUsersTeams");
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.Team", b =>
                {
                    b.Navigation("TeamMembers");

                    b.Navigation("TeamRoles");
                });

            modelBuilder.Entity("YourScheduler.Infrastructure.Entities.TeamRole", b =>
                {
                    b.Navigation("ApplicationUserTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
